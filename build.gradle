plugins {
	id 'org.springframework.boot' version '2.5.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.falabella'
version = '1.0.0'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "io.springfox:springfox-boot-starter:3.0.0"
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine'
}

test {
	systemProperty 'spring.profiles.active', 'test'
	useJUnitPlatform()
	finalizedBy jacocoTestCoverageVerification, jacocoTestReport
	jacoco {
		excludes = ['**/com/falabella/product/ProductApplication*',
					'**/com/falabella/product/infrastructure/config/**/*'
		]
	}
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['**/com/falabella/product/ProductApplication*',
							  '**/com/falabella/product/infrastructure/config/**/*'
					]
			)
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {

			afterEvaluate {
				classDirectories.setFrom(files(classDirectories.files.collect {
					fileTree(dir: it,
							exclude: ['**/com/falabella/product/ProductApplication*',
									  '**/com/falabella/product/infrastructure/config/**/*'
							]
					)
				}))
			}

			element = "BUNDLE"
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.85
			}
		}
	}
}
